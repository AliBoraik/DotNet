<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DB</name>
    </assembly>
    <members>
        <member name="M:DB.Controllers.PlaylistController.DeletePlaylist(System.Int32,System.String)">
            <summary>
            Deletes a playlist by given ID.
            </summary>
            <remarks>
            Предполагается, что мы достаем из принципала или из джвт токена userId(откуда там достается)
            и только потом удаляем плейлист. Это нужно, чтобы юзеры не могли удалятьь чужие плейлисты :)
            </remarks>
            <param name="playlistId"></param>
            <param name="userId"></param>
            <response code="200">If request is succeed.</response>
            <response code="404">If playlist with preferable ID doesn't exist.</response>
        </member>
        <member name="M:DB.Controllers.PlaylistController.EditPlaylist(DB.Models.Playlist)">
            <summary>
            Edit a Playlist.
            </summary>
            <param name="newPlaylist"></param>
            <response code="200">If request is succeed.</response>
            <response code="400">Not valid request.</response>
        </member>
        <member name="M:DB.Controllers.PlaylistController.CreatePlaylist(DB.Models.Playlist)">
             <summary>
             Creates a Playlist.
             </summary>
             <remarks>
             Minimal request JSON:
            
                 {
                    "title": "SuperTitle", 
                    "userId": "5f34130c-2ed9-4c83-a600-e474e8f48bac",
                    "playlistType": 3,
                    "genreType": 4,
                    "verified": true
                 }
            
             </remarks>
             <param name="newPlaylist"></param>
             <response code="200">If request is succeed.</response>
             <response code="400">Not valid request.</response>
        </member>
        <member name="M:DB.Controllers.PlaylistController.GetPlaylistInfo(System.Int32)">
             <summary>
             Gets a playlist with full information.
             </summary>
             <param name="playlistId"></param>
             <remarks>
             Sample response:
            
                 {
                    "id": 2,
                    "userId": "5f34130c-2ed9-4c83-a600-e474e8f48bac",
                    "title": "simple playlist",
                    "playlistType": 3,
                    "genreType": 3,
                    "songs": []
                 }
            
             </remarks>
             <response code="200">If request is succeed.</response>
             <response code="404">If playlist with preferable ID doesn't exist.</response>
        </member>
        <member name="M:DB.Controllers.PlaylistController.LikePlaylist(System.Int32,System.String)">
            <summary>
            Likes a playlist.
            </summary>
            <param name="playlistId"></param>
            <param name="userId"></param>
            <response code="200">If request is succeed.</response>
            <response code="400">If playlist or user with preferable IDs don't exist.</response>
        </member>
        <member name="M:DB.Controllers.PlaylistController.GetUserLibrary(System.String)">
             <summary>
             Gets all playlists which were liked by user.
             </summary>
             <remarks>
             Sample response:
                 
                 [
                  {
                      "id": 1,
                      "userId": "5f34130c-2ed9-4c83-a600-e474e8f48bac",
                      "title": "LikedSongs",
                      "playlistType": 4,
                      "genreType": 4,
                      "songs": []
                  },
                  {
                      "id": 3,
                      "userId": "5f34130c-2ed9-4c83-a600-e474e8f48bac",
                      "title": "string",
                      "playlistType": 3,
                      "genreType": 0,
                      "songs": []
                  }
                 ]
            
             </remarks>
             <param name="userId"></param>
             <response code="200">If request is succeed.</response>
             <response code="404">If playlist with preferable ID doesn't exist.</response>
        </member>
        <member name="M:DB.Controllers.PlaylistController.GetRandomPlaylistsByGenre(DB.Models.EnumTypes.GenreType)">
             <summary>
             Gets a random playlists by preferred GENRE TYPE.
             </summary>
             <param name="genreType"></param>
             <remarks>
             Sample response:
                 
                 [
                  {
                      "id": 1,
                      "userId": "5f34130c-2ed9-4c83-a600-e474e8f48bac",
                      "title": "LikedSongs",
                      "playlistType": 4,
                      "genreType": 4,
                      "songs": []
                  },
                  {
                      "id": 3,
                      "userId": "5f34130c-2ed9-4c83-a600-e474e8f48bac",
                      "title": "string",
                      "playlistType": 3,
                      "genreType": 0,
                      "songs": []
                  }
                 ]
            
             </remarks>
             <response code="200">If request is succeed. Also if preferable genre exists, but no matches for playlists  </response>
             <response code="404">If preferable genre doesn't exist.</response>
        </member>
        <member name="M:DB.Controllers.UserContentController.GetUserName(System.String)">
             <summary>
             Gets user's name.
             </summary>
             <remarks>
             Sample response:
            
                 {
                    "name": "username",
                 }
            
             </remarks>
             <param name="userId"></param>
             <response code="200">If request is succeed.</response>
             <response code="404">If user with preferable ID doesn't exist.</response>
        </member>
        <member name="M:DB.Controllers.UserContentController.GetPlaylists(System.String)">
             <summary>
             Gets all playlists that were created by the user.
             </summary>
             <remarks>
             Sample response:
                 
                 [
                  {
                      "id": 1,
                      "userId": "5f34130c-2ed9-4c83-a600-e474e8f48bac",
                      "title": "LikedSongs",
                      "playlistType": 4,
                      "genreType": 4,
                      "songs": []
                  },
                  {
                      "id": 3,
                      "userId": "5f34130c-2ed9-4c83-a600-e474e8f48bac",
                      "title": "string",
                      "playlistType": 3,
                      "genreType": 0,
                      "songs": []
                  }
                 ]
            
             </remarks>
             <param name="userId"></param>
             <response code="200">If request is succeed.</response>
             <response code="404">If user with preferable ID doesn't exist.</response>
        </member>
        <member name="M:DB.Data.Repository.ISpotifyRepository.GetPlaylistInfo(System.Int32)">
            <summary>
                Асинхронно возвращает Task плейлист, со всей инфорацией о пользователях и песнях
            </summary>
            <param name="playlistId"> <see cref="T:System.String" /></param>
            <returns>
                The task result contains a <see cref="T:DB.Models.Playlist" /> 
            </returns>
        </member>
    </members>
</doc>
