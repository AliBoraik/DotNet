version: '3.4'

services:
  server:
    build: 
      dockerfile:  dockerfile-api
    container_name:  'server'
    ports:
      - '7043:80'
    restart: always
    environment:
      CONNECTION_STRING_DOCKER: "host=db;Database=messagedb;Port=5432;Username=postgres;Password=admin"
      ASPNETCORE_ENVIRONMENT: Development
    networks:
      - chat-app
    depends_on:
      - zenko
      - mongo
      - rabbitmq
      
  client:
    build: ./Chat.Api/ClientApp
    container_name: 'client'
    ports:
      - '3000:3000'
    networks:
      - chat-app


  consumer:
    build: 
      dockerfile:  dockerfile-background
    container_name: 'consumer'
    environment:
      CONNECTION_STRING_DOCKER: "host=db;Database=messagedb;Port=5432;Username=postgres;Password=admin"
    ports:
      - "8043:80"
    networks:
      - chat-app
    depends_on:
      - rabbitmq

  db:
    image: postgres:latest
    container_name: db
    ports:
      - '5432:5433'
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "admin"
      POSTGRES_DB: "messagedb"
    networks:
      - chat-app

  zenko:
    image: zenko/cloudserver:latest
    container_name: zenko
    environment:
      SCALITY_ACCESS_KEY_ID: "AKIAIOSFODNN7EXAMPLE"
      SCALITY_SECRET_ACCESS_KEY: "wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY"
      S3DATA: "multiple"
      S3BACKEND: "mem"
      ENDPOINT: "zenko"
    ports:
      - '8000:8000'
    networks:
      - chat-app
    
  rabbitmq:
    image: rabbitmq
    container_name: 'rabbitmq'
    ports:
      - 5672:5672
      - 15672:15672
    networks:
      - chat-app

  mongo:
    image: mongo:latest
    container_name: 'mongo'
    volumes:
      - ~/mongo-db:/data/db
    environment:
      - MONGO_INITDB_DATABASE=mongo_test
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=mongo
    ports:
      - '27017:27017'

  redis:
    container_name: 'redis'
    image: redis
    ports:
      - '6379:6379'
        
networks:
  chat-app:
    driver: bridge