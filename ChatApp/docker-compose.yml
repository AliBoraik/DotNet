version: '3.4'

services:
  chat.api:
    build: 
      dockerfile:  Dockerfile-Api
    ports:
      - '7043:80'
    restart: always
    environment:
      CONNECTION_STRING_DOCKER: "host=db;Database=messagedb;Port=5432;Username=postgres;Password=admin"
      ASPNETCORE_ENVIRONMENT: Development
    networks:
      - chatapp
    depends_on:
      - rabbitmq

  background-service:
    build: 
      dockerfile:  Dockerfile-background
    environment:
      CONNECTION_STRING_DOCKER: "host=db;Database=messagedb;Port=5432;Username=postgres;Password=admin"
    ports:
      - "8043:80"
    networks:
      - chatapp
    depends_on:
      - rabbitmq

  react:
    build: ./Chat.Api/Clientapp
    ports:
      - '3000:3000'
    networks:
      - chatapp
  
  db:
    image: postgres:latest
    ports:
      - '5432:5433'
    restart: always
    container_name: db
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "admin"
      POSTGRES_DB: "messagedb"
    networks:
      - chatapp
  zenko:
    image: zenko/cloudserver:latest
    environment:
      SCALITY_ACCESS_KEY_ID: "AKIAIOSFODNN7EXAMPLE"
      SCALITY_SECRET_ACCESS_KEY: "wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY"
      S3DATA: "multiple"
      S3BACKEND: "mem"
    ports:
      - '8000:8000'
    restart: always
    container_name: zenko
    networks:
      - chatapp
    
  rabbitmq:
    image: rabbitmq
    container_name: 'rabbitmq'
    ports:
      - 5672:5672
      - 15672:15672
    networks:
      - chatapp

  mongo_db:
    image: mongo:latest
    container_name: mongo_db
    volumes:
      - ~/mongo-db:/data/db
    environment:
      - MONGO_INITDB_DATABASE=mongo_test
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=mongo
    ports:
      - '27017:27017'
  redis:
    container_name: redis
    image: redis
    ports:
      - '6379:6379'
        
networks:
  chatapp:
    driver: bridge